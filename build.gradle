import groovy.json.JsonSlurper
import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version "1.6-SNAPSHOT"
    id 'babric-loom-extension' version "1.6-SNAPSHOT"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'io.freefair.lombok' version "8.+"
    id 'maven-publish'
    id 'com.modrinth.minotaur' version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

base.archivesName = project.archives_base_name
version = project.mod_version+"+"+project.minecraft_version+"-babric"
group = project.maven_group


loom {
    customMinecraftManifest.set("https://babric.github.io/manifest-polyfill/${minecraft_version}.json")
    intermediaryUrl.set("https://maven.glass-launcher.net/babric/babric/intermediary/%1\$s/intermediary-%1\$s-v2.jar")
}

project.ext.lwjglVersion = "3.3.4"

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "babric:barn:${project.yarn_mappings}:v2"
    modImplementation "babric:fabric-loader:${project.loader_version}"
    implementation "org.slf4j:slf4j-api:1.8.0-beta4"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.16.0"

    implementation("org.javassist:javassist:3.29.2-GA")
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    for (String platform : ["linux", "windows", "macos", "windows-arm64", "macos-arm64"]){
        runtimeOnly "org.lwjgl:lwjgl::natives-$platform"
        runtimeOnly "org.lwjgl:lwjgl-glfw::natives-$platform"
        runtimeOnly "org.lwjgl:lwjgl-openal::natives-$platform"
        runtimeOnly "org.lwjgl:lwjgl-opengl::natives-$platform"
    }

    //ploceus.addCommonLibraries()
    //ploceus.dependOsl("modRuntimeOnly", osl_version, GameSide.CLIENT)


}

configurations.configureEach {
    exclude group: "org.lwjgl.lwjgl"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

shadowJar {
    minimize {
        exclude(dependency("org.lwjgl:lwjgl:$lwjglVersion"))
        exclude(dependency("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
        exclude(dependency("org.lwjgl:lwjgl-openal:$lwjglVersion"))
        exclude(dependency("org.lwjgl:lwjgl-opengl:$lwjglVersion"))
    }
    dependencies {
        include(dependency("org.javassist:javassist:3.29.2-GA"))

        include(dependency("org.lwjgl:lwjgl:$lwjglVersion"))
        include(dependency("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
        include(dependency("org.lwjgl:lwjgl-openal:$lwjglVersion"))
        include(dependency("org.lwjgl:lwjgl-opengl:$lwjglVersion"))
    }
}

tasks.register('remapShadowJar', RemapJarTask) {
    dependsOn shadowJar
    input = shadowJar.archiveFile
    setArchiveClassifier("all-remapped")
    addNestedDependencies = false
}

tasks.build.dependsOn remapShadowJar

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            from components.java
            artifact remapShadowJar
        }
    }

    // select the repositories you want to publish to
    repositories {
        maven {
            name = "owlMaven"
            def repository = project.version.toString().contains("beta") || project.version.toString().contains("alpha") ? "snapshots" : "releases"
            url = "https://moehreag.duckdns.org/maven/" + repository
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

tasks.modrinth.dependsOn publish

static def fetchGameVersions(){

    /*List<String> versions = new ArrayList<>()
    InputStream stream = URI.create("https://piston-meta.mojang.com/mc/game/version_manifest_v2.json").toURL().openStream()
    JsonSlurper slurper = new JsonSlurper()
    Map<String, ?> map = slurper.parse(stream) as Map<String, ?>
    List<Version> json = map.get("versions") as List<Version>
    json.forEach(ve -> {
        if (ve.type == "release") {
            def v = ve.id
            String[] parts = v.split("\\.");
            int minor = Integer.parseInt(parts[1]); // TODO fix this mess.
            if (minor >= 2 && minor < 3) {
                versions.add(v)
            }
        }
    })*/
    return ["b1.7.3"]
}

class Version {
    String id
    String type
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "lpiIRiAZ"
    versionType = "release"
    uploadFile = remapShadowJar
    additionalFiles = [sourcesJar]
    gameVersions = fetchGameVersions()
    loaders = ["fabric", "quilt"]
    dependencies {
    }
}